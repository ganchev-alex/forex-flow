// <auto-generated />
using System;
using ForexFlow.DataAccess.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ForexFlow.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250407074258_CorrectingTypeInInvoiceColumnName")]
    partial class CorrectingTypeInInvoiceColumnName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("ForexFlow.Model.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AmountBeforeVat")
                        .HasColumnType("TEXT");

                    b.Property<string>("BillToAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BillToCountry")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BillToName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoiceCurrencyCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoiceItems")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("IssuerAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IssuerCountry")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IssuerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RecipientAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RecipientCountry")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RecipientName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("VatRate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceCurrencyCode");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("ForexFlow.Models.Currency", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ExchangeRateToBase")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Code");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("ForexFlow.Models.SingleCurrencyAmount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyCode");

                    b.ToTable("SingleCurrencyAmounts");
                });

            modelBuilder.Entity("ForexFlow.Model.Invoice", b =>
                {
                    b.HasOne("ForexFlow.Models.Currency", "InvoiceCurrency")
                        .WithMany()
                        .HasForeignKey("InvoiceCurrencyCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvoiceCurrency");
                });

            modelBuilder.Entity("ForexFlow.Models.SingleCurrencyAmount", b =>
                {
                    b.HasOne("ForexFlow.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");
                });
#pragma warning restore 612, 618
        }
    }
}
